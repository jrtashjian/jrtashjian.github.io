<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>JR Tashjian</title>
    <link>https://jrtashjian.com</link>
    <description>Senior Software Engineer</description>
    <atom:link xmlns:atom="http://www.w3.org/2005/Atom" href="https://jrtashjian.com/feed.xml" type="application/rss+xml" rel="self"/>
    <language>en-US</language>
    <copyright>Copyright (c) JR Tashjian 2022</copyright>
    <pubDate>Sun, 28 Aug 2022 15:30:13 -0400</pubDate>
    <lastBuildDate>Sun, 28 Aug 2022 15:30:13 -0400</lastBuildDate>
    <item>
      <title><![CDATA[Featured Image Fallback for Child Pages]]></title>
      <link>https://jrtashjian.com/2017/05/featured-image-fallback-for-child-pages</link>
      <description><![CDATA[Continuing from the same project where I needed to highlight a parent page in a WordPress menu when on a child page, featured images is another place where I wanted some custom functionality. This custom functionality I'm about to share wasn't...]]></description>
      <content:encoded><![CDATA[<p>Continuing from the same project where I needed to <a href="https://jrtashjian.com/2017/05/highlighting-parent-page-in-wordpress-menus/">highlight a parent page in a WordPress menu</a> when on a child page, featured images is another place where I wanted some custom functionality. This custom functionality I'm about to share wasn't necessarily a requirement but I wanted to make it as simple as possible for the client to edit the site easily while still maintaining the design the designer had created.</p>

<p>As I mentioned in the last post the site was designed to have a handful of top-level pages (parents) with an undefined number of related child pages. This site also uses the static front page option in WordPress. The site's layout was a top header navbar, then below that, a featured image with text overlaid, then the page content below that.</p>

<p>What I wanted to do to implement the featured image was to build in a fallback so that we always have a featured image displayed behind the overlaid text. The other option would be to have a different layout where the featured image is not displayed and the page content contains the overlaid text above the actual page content. The fallback is a bit more graceful so I decided to do that.</p>

<p>Below is my solution for this fallback. First, we want to see if the current page has a <code>post_thumbnail</code> (which is our featured image). If the current page returns a <code>post_thumbnail</code> we want to use that. The client should be able to specify an image for any page they want. Now if we don't find a <code>post_thumbnail</code> on the current page I want to check the topmost parent page for it. This would allow the client to set a featured image for an entire group of child pages. And finally, if a <code>post_thumbnail</code> was not returned from the topmost parent page we would then check the defined static front page and pull it from there.</p>

<p>More simply the fallback for the <code>post_thumbnail</code> would be: Child Page -> Parent Page -> Front Page.</p>

<pre><code>&lt;?php

/**
 * Generate markup for the featured image above each page.
 *
 * If a featured image does not exist for the current page we will try and pull one from the parent page. If we still
 * haven't found a featured image we will try and pull one from the 'page_on_front' (when using a static front-page).
 * Otherwise we show nothing.
 */
function featured_image( $size = 'post-thumbnail' )
{
    global $post;

    if ( !is_page() ) {
        return;
    }

    $the_post_thumbnail = get_the_post_thumbnail( $size );

    // Get post_thumbnail from top most parent if we haven't found one yet.
    if ( empty( $the_post_thumbnail ) ) {
        $page_parents   = get_post_ancestors( $post );
        $topmost_parent = array_pop( $page_parents );

        $the_post_thumbnail = get_the_post_thumbnail( $topmost_parent );
    }

    // Get post_thumbnail from "Front Page" template if we still don't find one.
    if ( empty( $the_post_thumbnail ) ) {
        $the_post_thumbnail = get_the_post_thumbnail( get_option( 'page_on_front' ), $size );
    }

    echo $the_post_thumbnail;
}
</code></pre>

<p>It's unlikely we wouldn't find a <code>post_thumbnail</code> like this but we could return a hard-coded default to account for that possibility if we didn't find one on the front page.</p>
]]></content:encoded>
      <guid>https://jrtashjian.com/2017/05/featured-image-fallback-for-child-pages</guid>
      <pubDate>Tue, 30 May 2017 20:00:00 -0400</pubDate>
      <author>JR Tashjian</author>
    </item>
    <item>
      <title><![CDATA[Highlighting parent page in WordPress menus]]></title>
      <link>https://jrtashjian.com/2017/05/highlighting-parent-page-in-wordpress-menus</link>
      <description><![CDATA[Menus in WordPress are a really simple and easy way to manage various navigation bars in a theme. <code>wp_nav_menu()</code> does a lot of the work automatically and includes a number of CSS classes for styling. Highlighting the current page is...]]></description>
      <content:encoded><![CDATA[<p>Menus in WordPress are a really simple and easy way to manage various navigation bars in a theme. <code>wp_nav_menu()</code> does a lot of the work automatically and includes a number of CSS classes for styling. Highlighting the current page is especially useful using <code>.current-menu-item</code> and <code>.current-menu-ancestor</code> classes.</p>

<p>There was one issue I recently ran into though. In order for the top-level page to be highlighted when a sub-page has been selected, you must have the sub-pages added into the navigation. This makes sense but for a recent project, I wanted to make it easy for the client to add sub-pages to the site without having to also add the pages to the WordPress navigation menu for parent-menu highlighting. I wanted top-level pages to have the .current-menu-ancestor to be added regardless if it was in a sub-menu.</p>

<p>Below is a solution to this problem. The way I set up my project was a handful of parent pages with an undefined number of child pages. I then added the parent pages to the Menu. We didn't want a dropdown menu.</p>

<p>Here we add a filter to the classes generated during the generation of the menu. First, we check if we're on a page with <code>is_page()</code>, if not we don't filter anything. If we are on a page we access the current post from the global <code>$post</code> variable and look for the topmost parent, if we don't find one the current post is not a child and we don't filter anything.</p>

<p>If we're on a page and we found a topmost parent we then check if the current menu <code>$item</code> being generated matches the topmost parent we found. If so we add the <code>.current-menu-ancestor</code> CSS class.</p>

<pre><code>&lt;?php

/**
 * Add the 'current-menu-ancestor' class to a parent page menu item where the child page is not part of the menu.
 *
 * @param array   $classes The CSS classes that are applied to the menu item's &lt;li&gt; element
 * @param WP_Post $item    The current menu item
 *
 * @return array The filtered CSS classes.
 */
function active_parent_in_menu_for_page( $classes, $item )
{
    global $post;

    if ( !is_page() ) {
        return $classes;
    }

    $page_parents   = get_post_ancestors( $post );
    $topmost_parent = array_pop( $page_parents );

    if ( empty( $topmost_parent ) ) {
        return $classes;
    }

    if ( $topmost_parent == $item-&gt;object_id ) {
        array_push( $classes, 'current-menu-ancestor' );
    }

    return $classes;
}

add_filter( 'nav_menu_css_class', 'active_parent_in_menu_for_page', 10, 2 );
</code></pre>

<p>Such a simple solution which makes the editing experience easier for the client when working with a custom theme.</p>
]]></content:encoded>
      <guid>https://jrtashjian.com/2017/05/highlighting-parent-page-in-wordpress-menus</guid>
      <pubDate>Thu, 25 May 2017 20:00:00 -0400</pubDate>
      <author>JR Tashjian</author>
    </item>
    <item>
      <title><![CDATA[Five Ways to Secure Your WordPress Plugins]]></title>
      <link>https://jrtashjian.com/2015/04/five-ways-to-secure-your-wordpress-plugins</link>
      <description><![CDATA[I wrote a piece on the VaultPress blog recently about some basic security practices plugin developers should know and include in their own plugins. This sums up my beliefs on being a plugin/theme developer:


  Writing plugins for WordPress gives us so...]]></description>
      <content:encoded><![CDATA[<p>I wrote a piece on the VaultPress blog recently about some basic security practices plugin developers should know and include in their own plugins. This sums up my beliefs on being a plugin/theme developer:</p>

<blockquote>
  <p>Writing plugins for WordPress gives us so much freedom and flexibility on the platform and with this ability comes a responsibility to the community; a responsibility to develop secure plugins that the community can trust and use on their websites. And by doing so, we are making the web a better place.</p>
</blockquote>

<p>Read the full article: <a href="http://blog.vaultpress.com/2015/03/27/five-ways-to-secure-your-wordpress-plugins/">Five Ways to Secure Your WordPress Plugins</a></p>
]]></content:encoded>
      <guid>https://jrtashjian.com/2015/04/five-ways-to-secure-your-wordpress-plugins</guid>
      <pubDate>Wed, 22 Apr 2015 20:00:00 -0400</pubDate>
      <author>JR Tashjian</author>
    </item>
    <item>
      <title><![CDATA[Talk: Getting Started with the Cron API]]></title>
      <link>https://jrtashjian.com/2015/02/talk-getting-started-with-the-cron-api</link>
      <description><![CDATA[I've wanted to speak at a conference for a long time and only recently decided to take the leap by submitting a talk for the local WordCamp in Saratoga. I chose the topic of the Cron API because I use something very similar everyday at Automattic and...]]></description>
      <content:encoded><![CDATA[<p>I've wanted to speak at a conference for a long time and only recently decided to take the leap by submitting a talk for the local <a href="http://saratoga.wordcamp.org/2014/">WordCamp in Saratoga</a>. I chose the topic of the Cron API because I use something very similar everyday at Automattic and I've not seen any talks on the component in WordPress Core. Check out the video of the talk below. I've also posted the slides on <a href="https://speakerdeck.com/jrtashjian/getting-started-with-the-cron-api">Speaker Deck</a>.</p>

<!-- [video width="1280" height="720" mp4="//jrtashjian.com/wp-content/uploads/2015/02/wc-toga-12-getting-started-with-cron_hd.mp4"][/video] -->

<p>I've been waiting for the video to show up on <a href="http://wordpress.tv/2015/01/20/jr-tashjian-getting-started-with-the-cron-api/">WordPress.tv</a> so I could review my first talk and see what I needed to work on. Overall I think it went well and there was a good turnout (we only had two tracks of talks) of around 40 people. A few things I need to work on: speaking more clearly and enunciate, refrain from using filler words as often, and use specific vocabulary consistently throughout the talk. I also noticed I looked down a little too much (mainly for keeping on track with my presenter notes) and I pointed at the projection a lot. I'm not sure if that was distracting or even necessary but I made my slides in a way that highlighted parts that I was talking about, pointing seemed redundant.</p>

<p>I was pretty nervous right up until I was standing in front of everyone and only became nervous when I lost my place or words. Regardless I thought it went well and I had fun. I plan on speaking again soon.</p>

<p>What did you think? What would you like to hear me talk about in the future?</p>
]]></content:encoded>
      <guid>https://jrtashjian.com/2015/02/talk-getting-started-with-the-cron-api</guid>
      <pubDate>Tue, 17 Feb 2015 19:00:00 -0500</pubDate>
      <author>JR Tashjian</author>
    </item>
    <item>
      <title><![CDATA[Postmark API Wrapper for CodeIgniter]]></title>
      <link>https://jrtashjian.com/2011/04/postmark-api-wrapper-for-codeigniter</link>
      <description><![CDATA[I've been using Postmark and it's API for quite a while. If you're still sending out emails through PHP's mail() function, you need to check out Postmark! With Postmark you can off-load those transactional emails and not have to worry about it yourself....]]></description>
      <content:encoded><![CDATA[<p>I've been using <a href="http://postmarkapp.com/">Postmark</a> and it's API for quite a while. If you're still sending out emails through PHP's <a href="http://php.net/mail">mail()</a> function, you need to check out Postmark! With Postmark you can off-load those transactional emails and not have to worry about it yourself.</p>

<p>While there is a Postmark API Wrapper for <a href="http://codeigniter.com/">CodeIgniter</a> already, I felt it was unnecessary to create an entirely different Email class just to send off API requests to Postmark. Instead, this library extends the Core CI_Email class, retaining the small footprint philosophy of CodeIgniter.</p>

<h2>Installation</h2>

<ol>
<li>Download the library from <a href="http://github.com/jrtashjian/postmark-codeigniter">Github</a>.</li>
<li>Copy <code>config/postmark.php</code> to your <code>application/config/</code> folder</li>
<li>Copy <code>libraries/Postmark.php</code> to your <code>application/libraries/</code> folder</li>
</ol>

<h2>Configuration</h2>

<p>There is only one setting you need to update in the config file (<code>application/config/postmark.php</code>) and that is your Postmark API key. You can find your API key from the Server Details -> Credentials page in your Postmark Account.</p>

<pre><code>$config['postmark_api_key'] = "YOUR_API_KEY_HERE";
</code></pre>

<h2>Loading the Library</h2>

<p>To use the library, you will need to load it along with the Core CI_Email library (because we extend it).</p>

<pre><code>$this-&gt;load-&gt;library( 'email' );
$this-&gt;load-&gt;library( 'postmark' );
</code></pre>

<p>OR</p>

<pre><code>$this-&gt;load-&gt;library( array( 'email', 'postmark' ) );
</code></pre>

<p>Just make sure to load the Core CI_Email (email) class first.</p>

<h2>Sending an Email</h2>

<p>The great thing about extending the Core CI_Email class is the ability to not have to change the way you use the class! The only difference is that you will be calling functions as <code>$this-&gt;postmark-&gt;function_name()</code> instead of <code>$this-&gt;email-&gt;function_name()</code>.</p>

<pre><code>$this-&gt;load-&gt;library( 'email' );
$this-&gt;load-&gt;library( 'postmark' );

$this-&gt;postmark-&gt;from( 'your_example.com', 'Your Name' );
$this-&gt;postmark-&gt;to( 'someone@example.com' );
$this-&gt;postmark-&gt;cc( 'another@another-example.com' );
$this-&gt;postmark-&gt;bcc( 'them@their-example.com' );

$this-&gt;postmark-&gt;subject( 'Email Test' );
$this-&gt;postmark-&gt;message( 'Testing the email class.' );

$this-&gt;postmark-&gt;send();
</code></pre>

<h2>Other Information</h2>

<p>When calling <code>$this-&gt;postmark-&gt;from()</code>, you will have to use your Postmark API Sender Signature located on the Signatures page in your Postmark Account.</p>

<h2>Changelog</h2>

<p>Version 1.0</p>

<p>April 22nd, 2011 - Initial Release</p>
]]></content:encoded>
      <guid>https://jrtashjian.com/2011/04/postmark-api-wrapper-for-codeigniter</guid>
      <pubDate>Thu, 21 Apr 2011 20:00:00 -0400</pubDate>
      <author>JR Tashjian</author>
    </item>
    <item>
      <title><![CDATA[Refactoring in Practice]]></title>
      <link>https://jrtashjian.com/2011/03/refactoring-in-practice</link>
      <description><![CDATA[I love taking larger functions and slimming them down into a more efficient and readable format. Here is a simple example of just that. The original function:



The refactored function:



The code is much more readable and can be understood easily. Try...]]></description>
      <content:encoded><![CDATA[<p>I love taking larger functions and slimming them down into a more efficient and readable format. Here is a simple example of just that. The original function:</p>

<pre><code>function strip_slashes( $data )
{
    if( is_array($data) )
    {
        foreach($data as $key =&gt; $val )
        {
            $data[$key] = strip_slashes($val);
        }
    }
    else
    {
        return stripslashes($data);
    }

    return $data;
}
</code></pre>

<p>The refactored function:</p>

<pre><code>function strip_slashes( $data )
{
    return is_array($data) ? array_map('strip_slashes', $data) : stripslashes($data);
}
</code></pre>

<p>The code is much more readable and can be understood easily. Try to do the same with your own functions. The more you practice refactoring old code the easier it will be to remember how to do things quicker.</p>
]]></content:encoded>
      <guid>https://jrtashjian.com/2011/03/refactoring-in-practice</guid>
      <pubDate>Wed, 09 Mar 2011 19:00:00 -0500</pubDate>
      <author>JR Tashjian</author>
    </item>
    <item>
      <title><![CDATA[CodeIgniter Form with Text CAPTCHA]]></title>
      <link>https://jrtashjian.com/2011/01/codeigniter-form-with-text-captcha</link>
      <description><![CDATA["A CAPTCHA (Completely Automated Public Turing Test To Tell Computers and Humans Apart) is a program that protects websites against bots by generating and grading tests that humans can pass but current computer programs cannot."
  
  - captcha.net


The...]]></description>
      <content:encoded><![CDATA[<blockquote>
  <p>"A CAPTCHA (Completely Automated Public Turing Test To Tell Computers and Humans Apart) is a program that protects websites against bots by generating and grading tests that humans can pass but current computer programs cannot."</p>
  
  <p>- <a href="http://captcha.net">captcha.net</a></p>
</blockquote>

<p>The current CAPTCHA system I started using is <a href="http://textcaptcha.com">Text CAPTCHA</a>. The Text CAPTCHA web service generates text-based CAPTCHAs which is a single question that can be easily solved by humans but cannot be solved by a robot. Since I added comments functionality to ThePollPlace a few weeks ago, I've been noticing lots of spam. Lots meaning, thousands of spam comments. So I implemented Text CAPTCHA because it was simple and easy to do. Now, I'll show you how to implement it into a form using <a href="http://codeigniter.com">CodeIgniter</a>. First I'll show you the code, then I'll explain it.</p>

<pre><code>// application/controllers/example.php
class Example extends Controller {

    function Example() {
        parent::Controller();
    }

    function index() {
        // load libraries
        $this-&gt;load-&gt;library( array( 'session', 'form_validation' ) );

        // load helper
        $this-&gt;load-&gt;helper( 'form' );

        // setup form validation
        $this-&gt;form_validation-&gt;set_rules( 'name', 'name', 'required' );
        $this-&gt;form_validation-&gt;set_rules( 'email', 'email', 'valid_email' );
        $this-&gt;form_validation-&gt;set_rules( 'url', 'url', 'prep_url' );
        $this-&gt;form_validation-&gt;set_rules( 'captcha', 'captcha', 'required|callback_check_captcha' );
        $this-&gt;form_validation-&gt;set_rules( 'comment', 'comment', 'required' );

        if ( $this-&gt;form_validation-&gt;run() ) {
            // create comment
            die('Validated!');
        }

        // setup textCAPTCHA
        try {
            $xml = @new SimpleXMLElement( 'http://textcaptcha.com/api/your_api_key', NULL, TRUE) ;
        } catch ( Exception $e ) {
            $fallback = '';
            $fallback .= 'Is ice hot or cold?';
            $fallback .= '' . md5( 'cold' ) . '';
            $fallback .= '';
            $xml = new SimpleXMLElement( $fallback );
        }

        // store answers in session for use later
        $answers = array();
        foreach ( $xml-&gt;answer as $hash ) {
            $answers[] = (string)$hash;
        }
        $this-&gt;session-&gt;set_userdata( 'captcha_answers', $answers );

        // load vars into view
        $this-&gt;load-&gt;vars( array( 'captcha' =&gt; (string)$xml-&gt;question ) );

        // load the view
        $this-&gt;load-&gt;view( 'example' );
    }

    function check_captcha( $string ) {
        $user_answer = md5( strtolower( trim( $string ) ) );
        $answers = $this-&gt;session-&gt;userdata( 'captcha_answers' );

        if( in_array( $user_answer, $answers ) ) {
            return TRUE;
        } else {
            $this-&gt;form_validation-&gt;set_message( 'check_captcha', 'Your answer was incorrect!' );
            return FALSE;
        }
    }
}
</code></pre>

<pre><code>// application/views/example.php
&lt;h2&gt;Leave a Comment&lt;/h2&gt;
&lt;?php echo form_open( '/example/index/' ); ?&gt;

&lt;div class="textfield"&gt;
    &lt;?php echo form_label( 'Name', 'name' ); ?&gt;
    &lt;?php echo form_error( 'name' ); ?&gt;
    &lt;?php echo form_input( 'name' ); ?&gt;
&lt;/div&gt;

&lt;div class="textfield"&gt;
    &lt;?php echo form_label( 'Email', 'email' ); ?&gt;
    &lt;?php echo form_error( 'email' ); ?&gt;
    &lt;?php echo form_input( 'email' ); ?&gt;
&lt;/div&gt;

&lt;div class="textfield"&gt;
    &lt;?php echo form_label( 'Url', 'url' ); ?&gt;
    &lt;?php echo form_error( 'url' ); ?&gt;
    &lt;?php echo form_input( 'url' ); ?&gt;
&lt;/div&gt;

&lt;div class="textfield"&gt;
    &lt;?php echo form_label( $captcha, 'captcha' ); ?&gt;
    &lt;?php echo form_error( 'captcha' ); ?&gt;
    &lt;?php echo form_input( 'captcha' ); ?&gt;
&lt;/div&gt;

&lt;div class="textarea"&gt;
    &lt;?php echo form_label( 'Comment', 'comment' ); ?&gt;
    &lt;?php echo form_error( 'comment' ); ?&gt;
    &lt;?php echo form_textarea( 'comment' ); ?&gt;
&lt;/div&gt;

&lt;div class="buttons"&gt;
    &lt;button type="submit" name="submit" value="submit"&gt;Submit Comment&lt;/button&gt;
&lt;/div&gt;
&lt;?php echo form_close(); ?&gt;
</code></pre>

<p>In order for Text CAPTCHA to do its job, we need to add a new form field for the question to be answered. I pass the question to the view as <code>$captcha</code>.</p>

<pre><code>&lt;div class="textfield"&gt;
    &lt;?php echo form_label( $captcha, 'captcha' ); ?&gt;
    &lt;?php echo form_error( 'captcha' ); ?&gt;
    &lt;?php echo form_input( 'captcha' ); ?&gt;
&lt;/div&gt;
</code></pre>

<p>Using CodeIgniter's <a href="http://codeigniter.com/user_guide/libraries/form_validation.html">Form Validation library</a>, we need to add a new rule for the CAPTCHA. Notice we also have defined a call back: <code>callback_check_captcha</code>. We will use this callback to write a custom validation function to make sure our CAPTCHA was answered correctly</p>

<pre><code>$this-&gt;form_validation-&gt;set_rules( 'captcha', 'captcha', 'required|callback_check_captcha' );
</code></pre>

<p>Next we need to call the Text CAPTCHA service to get our random question. You will need to <a href="http://textcaptcha.com/register">register</a> to receive your api key. Be sure to replace <code>your_api_key</code> with the key you receive. This try-catch statement will attempt to communicate with the Text CAPTCHA web service. If it fails, we fallback to a predefined question seamlessly. We then store all of the accepted answers into an array which is also stored in the session so we can use it for validation later.</p>

<pre><code>// setup textCAPTCHA
try {
    $xml = @new SimpleXMLElement('http://textcaptcha.com/api/your_api_key', NULL, TRUE);
} catch ( Exception $e ) {
    $fallback = '&lt;captcha&gt;';
    $fallback .= '&lt;question&gt;Is ice hot or cold?&lt;/question&gt;';
    $fallback .= '&lt;answer&gt;' . md5( 'cold' ) . '&lt;answer&gt;';
    $fallback .= '&lt;/captcha&gt;';
    $xml = new SimpleXMLElement( $fallback );
}

// store answers in session for use later
$answers = array();
foreach ( $xml-&gt;answer as $hash ) {
    $answers[] = (string)$hash;
}
$this-&gt;session-&gt;set_userdata( 'captcha_answers', $answers );
</code></pre>

<p>After Text CAPTCHA is setup and initialized, we need to pass the question to our view for use in the form.</p>

<pre><code>// load vars into view
$this-&gt;load-&gt;vars( array( 'captcha' =&gt; (string)$xml-&gt;question ) );
</code></pre>

<p>CodeIgniter's Form Validation library makes custom validation functions easy. All we need to do is check if the answer submitted is in the list of acceptable answers. If not, we fail the test and return our error message.</p>

<pre><code>function check_captcha( $string ) {
    $user_answer = md5( strtolower( trim( $string ) ) );
    $answers = $this-&gt;session-&gt;userdata( 'captcha_answers' );

    if ( in_array( $user_answer, $answers ) ) {
        return TRUE;
    } else {
        $this-&gt;form_validation-&gt;set_message( 'check_captcha', 'Your answer was incorrect!' );
        return FALSE;
    }
}
</code></pre>

<p>That's it! Simple enough, right? You can <a href="https://jrtashjian.com/wp-content/uploads/2011/01/codeigniter-form-with-text-captcha.zip">download the demo</a> for the complete code.</p>
]]></content:encoded>
      <guid>https://jrtashjian.com/2011/01/codeigniter-form-with-text-captcha</guid>
      <pubDate>Thu, 13 Jan 2011 19:00:00 -0500</pubDate>
      <author>JR Tashjian</author>
    </item>
    <item>
      <title><![CDATA[Directory Listing from a Path]]></title>
      <link>https://jrtashjian.com/2010/12/directory-listing-from-a-path</link>
      <description><![CDATA[This is a little snippet of code I've been using a lot recently. This function will return all directories inside the path passed as <code>$path</code>. The functions utilizes the ability of Anonymous Functions, only available in PHP 5.3.0.]]></description>
      <content:encoded><![CDATA[<pre><code>$path = dirname( _FILE_ );

$listing = array_filter( scandir( $path ), function( $var ) {

    // remove special directories '.' and '..' from listing
    if ( preg_match( '/^\[.\]{1,2}$/', $var ) ) { return FALSE; }

    // remove files from listing
    if ( !is_dir( $var ) ) { return FALSE; }

    return TRUE;
} );
</code></pre>

<p>This is a little snippet of code I've been using a lot recently. This function will return all directories inside the path passed as <code>$path</code>. The functions utilizes the ability of <a href="http://php.net/functions.anonymous">Anonymous Functions</a>, only available in PHP 5.3.0.</p>
]]></content:encoded>
      <guid>https://jrtashjian.com/2010/12/directory-listing-from-a-path</guid>
      <pubDate>Tue, 21 Dec 2010 19:00:00 -0500</pubDate>
      <author>JR Tashjian</author>
    </item>
    <item>
      <title><![CDATA[Validate terminal command in PHP]]></title>
      <link>https://jrtashjian.com/2010/11/validate-terminal-command-in-php</link>
      <description><![CDATA[Testing if a function exists in PHP is easy. Testing if a command exists on the system is also easy. I've never really run into the problem of having to create a compatibility suite script to make sure my PHP script will run without trouble. Simple...]]></description>
      <content:encoded><![CDATA[<p>Testing if a function exists in PHP is easy. Testing if a command exists on the system is also easy. I've never really run into the problem of having to create a compatibility suite script to make sure my PHP script will run without trouble. Simple things like checking the version of PHP installed or the version of MySQL are straightforward. This time though, I needed to make sure a command line program existed on the system which I invoke using <a href="http://php.net/function.exec"><code>exec()</code></a>. First and foremost, we need to check that <code>exec()</code> exists and we can use it. If it does, we then need to use it to execute a command on the server which will output the path to our command. I will be testing for <code>tar</code> in the example.</p>

<pre><code>if ( function_exists( 'exec' ) ) {
    // send test command to system
    exec( 'command -v tar &gt;&amp; /dev/null &amp;&amp; echo "Found" || echo "Not Found"', $output );

    if ( $output[0] == "Found" ) {
        // command is available
        return TRUE;
    } else {
        // command is unavailable
        return FALSE;
    }
}
</code></pre>

<p>Our focus will be this line:</p>

<pre><code>exec( 'command -v tar &gt;&amp; /dev/null &amp;&amp; echo "Found" || echo "Not Found"', $output );
</code></pre>

<p>In the first part of the command we will run <code>command</code> with the <code>-v</code> option. The <code>-v</code> option causes the output of the <code>_command_</code> to be displayed or return zero if the <code>_command_</code> is not found. Here's a short description of the command:</p>

<pre><code>SYNTAX
    command [-pVv] _command_ [arguments ...]
OPTIONS
    -P  Use a default path
    -v  Verbose
    -V  More verbose
</code></pre>

<p>The next part of the command we use <code>&gt;&amp;</code> which is a metacharacter in Unix which tells the command to redirect the standard output and standard error. Which in this case, we redirect the output to a file <code>/dev/null</code>. We do this because we want to handle the response of the command with the last part. The last part of the command we use <code>&amp;&amp;</code> which is another metacharacter which tells Unix to execute the following command only if the preceding command succeeds. We also use the <code>||</code> metacharacter which tells Unix to execute the following command if the preceding command fails. To understand it better, it's just like writing an <code>if-then-else</code> statement:</p>

<pre><code>If( command -v tar &gt;&amp; /dev/null ) Then
    echo "Found"
Else
    echo "Not Found"
End If
</code></pre>

<p>Now we need to bring the response back to PHP. We do that with the second parameter of <code>exec();</code> <code>$output</code>. Every line of output from the command will be returned in <code>$output</code> as an array which we can then run our conditional against. Short, simple, easy little command. Just replace <code>tar</code> with the command you'd like to check for. You could even take the code and place it into a function to make it easily reusable.</p>
]]></content:encoded>
      <guid>https://jrtashjian.com/2010/11/validate-terminal-command-in-php</guid>
      <pubDate>Mon, 08 Nov 2010 19:00:00 -0500</pubDate>
      <author>JR Tashjian</author>
    </item>
    <item>
      <title><![CDATA[Modular Sidebar in WordPress]]></title>
      <link>https://jrtashjian.com/2010/08/modular-sidebar-in-wordpress</link>
      <description><![CDATA[Like all good developers, I go back and look at past code to see what I could have improved and how I can apply the new knowledge to a current project. Both of the projects in question had sidebars with sections that are shared throughout the site....]]></description>
      <content:encoded><![CDATA[<p>Like all good developers, I go back and look at past code to see what I could have improved and how I can apply the new knowledge to a current project. Both of the projects in question had sidebars with sections that are shared throughout the site. However, not all sections are being displayed at once. Some blocks of HTML would be show on the homepage, another on the about page and both on the contact page. Here is how I coded it in <a href="http://wordpress.org">WordPress</a> for each site.</p>

<h2>Site One</h2>

<p>For this site, there is 'Live Bulletin', 'Make a Donation', 'Testimonials', 'Downloads' and 'Social Networks' sections. In the sidebar template I had each section in it's own <code>if</code> statement. For each <code>if</code> statement, I would use WordPress' <a href="http://codex.wordpress.org/Conditional_Tags">Conditional Tags</a> to show or hide certain sections that I needed for a particular page. Here is a quick glance at how my template file was looking:</p>

<pre><code>&lt;div id="sidebar"&gt;

    &lt;?php if ( !is_page( 270 ) AND !is_page( 262 ) ) : ?&gt;
        &lt;div id="live-bulletin"&gt;
            &lt;!-- html code --&gt;
        &lt;/div&gt;
    &lt;?php endif; ?&gt;

    &lt;?php if ( is_page( 270 ) ) : ?&gt;
        &lt;div id="make-donation"&gt;
            &lt;!-- html code --&gt;
        &lt;/div&gt;
    &lt;?php endif; ?&gt;

    &lt;?php if ( is_home() OR is_page( 262 ) ) : ?&gt;
        &lt;div id="testimonials"&gt;
            &lt;!-- html code --&gt;
        &lt;/div&gt;
    &lt;?php endif; ?&gt;

    &lt;?php if ( is_front_page() OR is_search() OR is_page( 890 ) ) : ?&gt;
        &lt;div id="downloads"&gt;
            &lt;!-- html code --&gt;
        &lt;/div&gt;
    &lt;?php endif; ?&gt;

    &lt;div id="social-networks"&gt;
        &lt;!-- html code (shown on all pages) --&gt;
    &lt;/div&gt;

&lt;/div&gt;
</code></pre>

<p>This sidebar template got pretty messy, very quickly. Little updates such as displaying a section on another page became a hassle. For the next site, I didn't rush, took my time and tried a different method.</p>

<h2>Site Two</h2>

<p>I'll just use the same sections as the previous site for easy comparison. With this next method, I decided to put each section in it's own function. That way, I could separate the logic from the view easily and make modifications quickly. Here is how this template came out:</p>

<pre><code>&lt;?php function sidebar_livebulletin() { ?&gt;
    &lt;div id="live-bulletin"&gt;
        &lt;!-- html code --&gt;
    &lt;/div&gt;
&lt;?php } ?&gt;

&lt;?php function sidebar_makedonation() { ?&gt;
    &lt;div id="make-donation"&gt;
        &lt;!-- html code --&gt;
    &lt;/div&gt;
&lt;?php } ?&gt;

&lt;?php function sidebar_testimonials() { ?&gt;
    &lt;div id="testimonials"&gt;
        &lt;!-- html code --&gt;
    &lt;/div&gt;
&lt;?php } ?&gt;

&lt;?php function sidebar_downloads() { ?&gt;
    &lt;div id="downloads"&gt;
        &lt;!-- html code --&gt;
    &lt;/div&gt;
&lt;?php } ?&gt;

&lt;?php function sidebar_socialnetworks() { ?&gt;
    &lt;div id="social-networks"&gt;
        &lt;!-- html code --&gt;
    &lt;/div&gt;
&lt;?php } ?&gt;

&lt;div id="sidebar"&gt;
    &lt;?php
    // Home Page
    if ( is_front_page() ) {
        sidebar_livebulletin();
        sidebar_testimonials();
        sidebar_socialnetworks();
    }

    // About Page
    if ( is_page( 8 ) ) {
        sidebar_testimonials();
        sidebar_downloads();
        sidebar_socialnetworks();
    }

    // Contact Page
    if( is_page( 12 ) ) {
        sidebar_makedonation();
        sidebar_socialnetworks();
    }
    ?&gt;
&lt;/div&gt;
</code></pre>

<p>Now that is a better looking template! I've seen this function-based implementation before and I really like it. Updating this template has proven to be quick and easy. I have already started to adopt this method and will continue too until I establish a better method.</p>
]]></content:encoded>
      <guid>https://jrtashjian.com/2010/08/modular-sidebar-in-wordpress</guid>
      <pubDate>Sun, 15 Aug 2010 20:00:00 -0400</pubDate>
      <author>JR Tashjian</author>
    </item>
    <item>
      <title><![CDATA[Google Maps API: Center Point Location]]></title>
      <link>https://jrtashjian.com/2009/11/google-maps-api-center-point-location</link>
      <description><![CDATA[As stated in the last article, I have been working a lot with the Google Maps API for a current client project. The most recent problem, was the application was required to display a quick overview of the current location the user was looking at. The...]]></description>
      <content:encoded><![CDATA[<p>As stated in the <a href="https://jrtashjian.com/2009/11/google-maps-api-custom-zoom-slider/" title="Google Maps API: Custom Zoom Slider">last article</a>, I have been working a lot with the <a href="http://code.google.com/apis/maps/">Google Maps API</a> for a current client project. The most recent problem, was the application was required to display a quick overview of the current location the user was looking at. The City and the State.</p>

<p>Again, <a href="http://jquery.com/">jQuery</a> will be used in this demo and we will be using the <a href="http://code.google.com/apis/maps/documentation/javascript/v2/reference.html#GClientGeocoder">GClientGeocoder</a> service.</p>

<h2>Loading Google Maps API</h2>

<p>Here is the HTML for the map and the initial Google Maps API javascript code:</p>

<pre><code>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-us" lang="en-us"&gt;
&lt;head profile="http://gmpg.org/xfn/11"&gt;

    &lt;meta http-equiv="content-type" content="text/html; charset=utf-8" /&gt;
    &lt;title&gt;Google Maps API: Center Point Location&lt;/title&gt;

    &lt;!-- JQUERY --&gt;
    &lt;script type="text/javascript" charset="utf-8" src="javascript/jquery.js"&gt;&lt;/script&gt;
    &lt;script type="text/javascript" charset="utf-8" src="javascript/jquery.ui.js"&gt;&lt;/script&gt;

    &lt;!-- GOOGLE MAPS API --&gt;
    &lt;script src="http://maps.google.com/maps?file=api&amp;v=2&amp;sensor=false&amp;key=YOUR_API_KEY_HERE" type="text/javascript"&gt;&lt;/script&gt;

    &lt;script type="text/javascript"&gt;
    // store the current zoom level for reference with google maps and custom zoom slider
    var currentZoomLevel = 10;

    // map object (global)
    var map;

    // geocoder object (global)
    var geocoder = new GClientGeocoder();

    $(document).ready(function() {
        // create the google map
        map = new GMap2(document.getElementById("map"));

        // set starting center point
        map.setCenter(new GLatLng(37.4419, -122.1419), currentZoomLevel);

        // set map UI as default
        map.setUIToDefault();
    });
    &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;div id="container"&gt;
    &lt;h1&gt;Google Maps API: Center Point Location&lt;/h1&gt;

    &lt;div id="content"&gt;
        &lt;ul&gt;
            &lt;li&gt;&lt;strong&gt;State: &lt;/strong&gt;&lt;span id="map-state"&gt;current state&lt;/span&gt;&lt;/li&gt;
            &lt;li&gt;&lt;strong&gt;City: &lt;/strong&gt;&lt;span id="map-city"&gt;current city&lt;/span&gt;&lt;/li&gt;
        &lt;/ul&gt;

        &lt;div id="map"&gt;&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<h2>Retrieving the Current Location</h2>

<p>Now that Google Maps API has been loaded, we need to create a function to get the current center-point's Longitude and Latitude. Then we need to get the address, via GClientGeocoder. Then we need to strip out the data we need and update our display.</p>

<pre><code>function updateMapLocation() {
    geocoder.getLocations(map.getCenter().toString(), function(point) {

        var currentAddress = point.Placemark[0].address;
        currentAddress = $.trim(currentAddress);
        var currentAddressMatches = currentAddress.split(/^([^,]\*),s([^,]\*),s([A-Z]{2})s([0-9]\*),s([^,]\*)$/);

        if(/^([^,]\*),s([a-zA-Z^,]\*)[0-9s]\*,s[^,]\*$/.test(currentAddress)) {
            var currentAddressMatches = currentAddress.split(/^([^,]\*),s([a-zA-Z^,]\*)[0-9s]\*,s[^,]\*$/);
        } else if(/^[^,]\*,s([^,]\*),s([a-zA-Z^,]\*)[0-9s]\*,s[^,]\*$/.test(currentAddress)) {
            var currentAddressMatches = currentAddress.split(/^[^,]\*,s([^,]\*),s([a-zA-Z^,]\*)[0-9s]\*,s[^,]\*$/);
        }

        var currentCity = currentAddressMatches[1];
        var currentState = currentAddressMatches[2];

        $('span#map-state').html(currentState);
        $('span#map-city').html(currentCity);
    });
}
</code></pre>

<p>In the code above, I realized GClientGeocoder was returning addresses for the current center point, in a few different formats. The two regular expression tests determine which format was returned and then splits out the data we need. After the data has been retrieved, we update the HTML display for <code>span#map-state</code> and <code>span#map-city</code>.</p>

<p>Now that we have a function to pull the address portions, we need to call it somewhere! I have two places where I have decided was the best time to update the location. When the maps is loaded (on page load) and anytime the map has been moved or zoomed.</p>

<p>So, we write an if statement to check if <a href="http://code.google.com/apis/maps/documentation/javascript/v2/reference.html#GMap2.isLoaded"><code>maps.isLoaded()</code></a> and then we need to <a href="http://code.google.com/apis/maps/documentation/javascript/v2/reference.html#GEvent.addListener"><code>addListenter()</code></a> to event <code>moveend</code>.</p>

<pre><code>// once map has fully loaded, update current location in view
if(map.isLoaded()) { updateMapLocation(); }

// update location in view upon changing the map in any way
GEvent.addListener(map, 'moveend', function() { updateMapLocation(); });
</code></pre>
]]></content:encoded>
      <guid>https://jrtashjian.com/2009/11/google-maps-api-center-point-location</guid>
      <pubDate>Sun, 22 Nov 2009 19:00:00 -0500</pubDate>
      <author>JR Tashjian</author>
    </item>
    <item>
      <title><![CDATA[Google Maps API: Custom Zoom Slider]]></title>
      <link>https://jrtashjian.com/2009/11/google-maps-api-custom-zoom-slider</link>
      <description><![CDATA[Google Maps API is just one of the API's I've been working with recently. The most recent problem I've run into that needed to be solved was the ability to create a custom designed zoom slider, replacing the default. The default one was not gonna work...]]></description>
      <content:encoded><![CDATA[<p><a href="http://code.google.com/apis/maps/">Google Maps API</a> is just one of the API's I've been working with recently. The most recent problem I've run into that needed to be solved was the ability to create a custom designed zoom slider, replacing the default. The default one was not gonna work for this project and the designer created a better looking one.</p>

<p>While searching online to see if this had already been achieved. I failed to find any example of what I needed to accomplish easily and still be able to reuse the code. So, I decided to take on the feat. But, where to start?</p>

<h2>jQuery</h2>

<p>I am a huge fan of <a href="http://jquery.com">jQuery</a> and jQuery has a user interface library, <a href="http://jqueryui.com">jQuery UI</a>. jQuery UI gives us the ability to create a slider widget, which is highly customizable and would work for what I needed to do.</p>

<p>So, go download <a href="http://jquery.com">jQuery</a> and download <a href="http://jqueryui.com/download">jQuery UI</a> and we'll get started! You will also need to get a <a href="http://code.google.com/apis/maps/signup.html">Google Maps API key</a>.</p>

<h2>Setup</h2>

<p>To begin, we will have to create an HTML file which loads all of our stylesheets, javascript and google map. Below is the initial HTML code. I have added the HTML for our custom slider already.</p>

<pre><code>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-us" lang="en-us"&gt;
&lt;head profile="http://gmpg.org/xfn/11"&gt;

    &lt;meta http-equiv="content-type" content="text/html; charset=utf-8" /&gt;
    &lt;title&gt;Google Maps API: Custom Zoom Slider&lt;/title&gt;

    &lt;!-- JQUERY --&gt;
    &lt;script type="text/javascript" charset="utf-8" src="javascript/jquery.js"&gt;&lt;/script&gt;
    &lt;script type="text/javascript" charset="utf-8" src="javascript/jquery.ui.js"&gt;&lt;/script&gt;

    &lt;!-- GOOGLE MAPS API --&gt;
    &lt;script src="http://maps.google.com/maps?file=api&amp;v=2&amp;sensor=false&amp;key=YOUR_API_KEY" type="text/javascript"&gt;&lt;/script&gt;

&lt;/head&gt;
&lt;body&gt;

&lt;!-- our custom slider container --&gt;
&lt;div id="zoom-slider"&gt;

    &lt;!-- decrease zoom level control --&gt;
    &lt;a id="zoom-control-minus" href="#"&gt;&lt;/a&gt;

    &lt;!-- zoom slider control --&gt;
    &lt;div id="zoom-range"&gt;
        &lt;div id="zoom-path"&gt;&lt;/div&gt;
    &lt;/div&gt;

    &lt;!-- increase zoom level control --&gt;
    &lt;a id="zoom-control-plus" href="#"&gt;&lt;/a&gt;

&lt;/div&gt;

&lt;!-- this is where google maps will load --&gt;
&lt;div id="map"&gt;&lt;/div&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<h2>Loading Google Maps API</h2>

<p>Next we will need to load the Google Maps API. Here is the code. It is commented pretty well and should be easy to understand.</p>

<pre><code>// store the current zoom level for reference with google maps and custom zoom slider
var currentZoomLevel = 10;

// map object (global)
var map;

$(document).ready(function() {
    // create the google map
    var map = new GMap2(document.getElementById("map"));

    // set starting center point
    map.setCenter(new GLatLng(37.4419, -122.1419), currentZoomLevel);

    // force normal maps type
    map.setMapType(G_NORMAL_MAP);

    // define minimum and maximum zoom levels
    G_NORMAL_MAP.getMinimumResolution = function() { return 0; }
    G_NORMAL_MAP.getMaximumResolution = function() { return 19; }

    // sets the map to "animate" zoom (only on double click and mouse wheel scroll)
    map.enableContinuousZoom();

    // enable the ability to zoom via mouse wheel
    map.enableScrollWheelZoom();
});
</code></pre>

<p>You can configure the return values of <code>G_NORMAL_MAP.getMinimumResolution</code> and <code>G_NORMAL_MAP.getMaximumResolution</code> to limit the zoom distance. 0 is the lowest value and 19 being the highest value (20 zoom levels).</p>

<h2>Lets Style It!</h2>

<p>Now that we have Google Maps loading into our div, we need to style it! Below is the code to style the Google Map and the custom slider. Again, I use a reset stylesheet which is bundled in the download.</p>

<pre><code>/* Globals
------------------------------------------------------*/
body { font:75% helvetica, arial, sans-serif; background:#fff; color:#333; text-align:center; }

/* Google Map
------------------------------------------------------*/
#map { margin-top:25px; height:300px; width:518px; border:1px solid #fff; }

/* Custom Slider
------------------------------------------------------*/
#zoom-slider { margin:0 auto; position:relative; height:28px; width:203px; background:url(../images/zoom-slider-background.jpg) no-repeat; }
/* minus button */
#zoom-slider #zoom-control-minus { position:absolute; top:9px; left:11px; display:block; height:10px; width:10px; background:url(../images/zoom-control-minus.jpg) no-repeat; overflow:hidden; text-indent:-9999em; }
/* plus button */
#zoom-slider #zoom-control-plus { position:absolute; top:9px; right:11px; display:block; height:10px; width:10px; background:url(../images/zoom-control-plus.jpg) no-repeat; overflow:hidden; text-indent:-9999em; }
/* container for the zoom 'handle' */
#zoom-slider #zoom-range { position:absolute; top:9px; left:31px; height:10px; width:140px; background:url(../images/zoom-slider-range.jpg) no-repeat; z-index:1; }
/* the zoom handle */
#zoom-slider #zoom-range .ui-slider-handle { position:absolute; top:0px; margin-left:-5px; height:10px; width:10px; background:url(../images/zoom-control-handle.png) no-repeat; border:0; cursor:pointer; z-index:2; outline:none; }
/* size path handle can travel*/
#zoom-slider #zoom-range #zoom-path { position:absolute; height:10px; width:130px; top:0px; left:5px; cursor:pointer; }
</code></pre>

<p>The zoom slider will now look like this (images bundled in the download):</p>

<p><img src="/assets/images/zoom-slider-image.jpg" alt="" title="zoom-slider-image" /></p>

<h2>Make It Work</h2>

<p>Now that we have everything looking nice and loading correctly, we need to make it work! Using jQuery UI and the Slider Widget, we will hook the <code>div#zoom-slider div#zoom-path</code> and allow jQuery UI to do it's magic. however, we still need to hook the plus and minus buttons and make the slider communicate with Google Maps to update our map. In the Javascript, after we are done setting up Google Maps, we will need to place this code.</p>

<pre><code>$(function() {
    // slider target
    var target = $('#zoom-slider #zoom-path');

    // create the slider
    target.slider({
        orientation: 'horizontal',
        value: currentZoomLevel,
        min: parseInt(G_NORMAL_MAP.getMinimumResolution()),
        max: parseInt(G_NORMAL_MAP.getMaximumResolution()),
        step: 1,
        animate: true,
        stop: function() {
            map.setZoom(parseInt(target.slider('option','value')));
        }
    });

    // update slider on zoom with double click
    GEvent.addListener(map, 'moveend', function() { target.slider('option','value', map.getZoom()); });

    // maximum slider value
    var maxValue = parseInt(target.slider('option', 'max'));

    // minimum slider value
    var minValue = parseInt(target.slider('option', 'min'));

    // hook increase zoom control
    $('#zoom-control-plus').click(function() {
        // current slider value
        var currentValue = parseInt(target.slider('option','value'));

        // current slider value increased by 1
        var newValue = currentValue+1;

        // is new value greater than max value?
        if(newValue = minValue) {
            // increase slider value
            target.slider('option', 'value', newValue);
            map.setZoom(newValue);
        } else {
            // slider is at max value
            target.slider('option', 'value', minValue);
            map.setZoom(minValue);
        }
        return false;
    });
});
</code></pre>

<p>Slider does a nice job of incrementing and decrementing the value and moving the handle the appropriate distance. Anytime the slider moves we need to update the map. Anytime the map moves we need to update the slider.</p>

<p>So, when initializing the slider, we hook the stop event of the slider. Each time the slider "stops" movement, we update the map zoom using the Google Map API function <a href="http://code.google.com/apis/maps/documentation/reference.html#GMap2.setZoom"><code>setZoom()</code></a>. So, now we know when we move the slider, the map will update as well!</p>

<p>Next, we hook the <code>moveend</code> event of Google Maps. If the user double clicks the map to zoom in and out or uses the scroll wheel to zoom in and out, we update the zoom value of the slider using <code>$.slider('option', 'value', map.getZoom())</code>. So, now we know when the map moves the slider will move as well.</p>

<p>Next, we need to hook the plus and minus buttons to allow a user to click them to zoom in and out. Using jQuery, we will bind each click event to update the map and slider values. The plus button will continue to zoom in until we reach the maximum zoom value. The minus button will continue to zoom out until we reach the minimum zoom value.</p>
]]></content:encoded>
      <guid>https://jrtashjian.com/2009/11/google-maps-api-custom-zoom-slider</guid>
      <pubDate>Sun, 15 Nov 2009 19:00:00 -0500</pubDate>
      <author>JR Tashjian</author>
    </item>
    <item>
      <title><![CDATA[CodeIgniter’s alternator() function]]></title>
      <link>https://jrtashjian.com/2009/10/codeigniters-alternator-function</link>
      <description><![CDATA[It's surprising to me how often I find little functions for tedious tasks, that CodeIgniter already has built in. One of these functions is the <code>alternator()</code> function in the String Helper. To begin using this function, make sure you have...]]></description>
      <content:encoded><![CDATA[<p>It's surprising to me how often I find little functions for tedious tasks, that <a href="http://codeigniter.com">CodeIgniter</a> already has built in. One of these functions is the <code>alternator()</code> function in the <a href="http://codeigniter.com/user_guide/helpers/string_helper.html">String Helper</a>. To begin using this function, make sure you have loaded the String Helper with the following code:</p>

<pre><code>$this-&gt;load-&gt;helper( 'string' );
</code></pre>

<p>What the <code>alternator()</code> function does is allow two or more items to be alternated between when iterating through a loop. Example from the CodeIgniter User Guide:</p>

<pre><code>for ( $i = 0; $i &lt; 10; $i++ ) {
    echo alternator( 'string one', 'string two' );
}
</code></pre>

<p>There is also no limit to how many parameters you can have:</p>

<pre><code>echo alternator( 'one', 'two', 'three', 'four', 'five' );
</code></pre>

<h2>Put it to Use</h2>

<p>What would you ever need that for? Well, what about if you are creating a list of items and every other needs <code>class="alt"</code> attached to it for styling differences? I run into this issue all the time. This is how I used to do it:</p>

<pre><code>&lt;ul&gt;
    &lt;?php $count = 1; ?&gt;
    &lt;?php foreach ( $list as $item ) : ?&gt;
        &lt;?php ( empty( $count ) ) ? $count = 1 : $count = 0; ?&gt;
        &lt;li &lt;?php echo ( $count == 1 ) ? 'class="alt"' : ''; ?&gt;&gt;
            &lt;?php echo $item; ?&gt;
        &lt;/li&gt;
    &lt;?php endforeach; ?&gt;
&lt;/ul&gt;
</code></pre>

<p>And this is with the <code>alternator()</code> function:</p>

<pre><code>&lt;ul&gt;
    &lt;?php foreach ( $list as $item ) : ?&gt;
        &lt;li &lt;?php echo alternator( 'class="alt"', '' ); ?&gt;&gt;
            &lt;?php echo $item; ?&gt;
        &lt;/li&gt;
    &lt;?php endforeach; ?&gt;
&lt;/ul&gt;
</code></pre>

<p>The <code>alternator()</code> function makes the ability to do this, much easier and cleaner than my original way. Hopefully I've helped someone out who had no idea this function was available.</p>
]]></content:encoded>
      <guid>https://jrtashjian.com/2009/10/codeigniters-alternator-function</guid>
      <pubDate>Tue, 06 Oct 2009 20:00:00 -0400</pubDate>
      <author>JR Tashjian</author>
    </item>
    <item>
      <title><![CDATA[Image Thumbnail Creation & Caching With CodeIgniter]]></title>
      <link>https://jrtashjian.com/2009/02/image-thumbnail-creation-caching-with-codeigniter</link>
      <description><![CDATA[How you handle the saving and display of images is very important while planning your web app. Questions you would ask yourself include: How should images be stored? What will the standard naming conventions be? How will thumbnails be created? In this...]]></description>
      <content:encoded><![CDATA[<p>How you handle the saving and display of images is very important while planning your web app. Questions you would ask yourself include: How should images be stored? What will the standard naming conventions be? How will thumbnails be created? In this article, I will be focusing on how I decided the way thumbnails would be generated in my applications.</p>

<h2>Initial Plan</h2>

<p>When I first started planning how images would be handled in a recent app, things went quite smoothly. I planned the logic flow like this:</p>

<ol>
<li>User uploads image</li>
<li>PHP saves image in <code>/assets/images/</code> directory</li>
<li>PHP would loop through an array of pre-defined image dimensions and create image thumbnails from the image</li>
<li>To display thumbnail, pass the path to thumbnail in image <code>src</code> attribute.</li>
</ol>

<p>Not so hard right? WRONG!</p>

<h2>The Problem</h2>

<p>In one of my config files, I created an array which you could specify multiple image dimensions (height and width) for use throughout the website/application. This works BUT, what if the person coding the front-end needs different dimensions for an already uploaded image? Or, maybe the client requires a small sizing change to the thumbnail?</p>

<p>Looping through the array sounded like a good idea but, for small changes like these requires more work than needed. If I continued using the array method to update or add a new thumbnail dimension, every previously uploaded image would need to be updated with the new thumbnail. There has to be a better way.</p>

<h2>The Solution</h2>

<p>With the task at hand, a <a href="http://mondaybynoon.com">friend</a> of mine lead me to a PHP library called <a href="http://phpthumb.sourceforge.net/">phpThumb()</a>. phpThumb() uses the GD library to create thumbnails from images on the fly. This is exactly what I needed. A way to dynamically create image thumbnails rather than pre-defined dimensions. phpThumb() was the way to go but, I didn't want to just use the library, I wanted to understand it. What better way to understand a library than to create one yourself?</p>

<h2>The Function</h2>

<p>By nature, this function will be a helper function in <a href="http://codeigniter.com/">CodeIgniter</a>. The only library being used will be the <a href="http://codeigniter.com/user_guide/libraries/image_lib.html">Image Library</a>.</p>

<p>To begin creating the function, we need to create a file in our <code>./application/helpers/</code> directory. I will be calling this file <code>image_helper.php</code>. Now we can create our function.</p>

<p>To generate a thumbnail of an image on the fly, we will have to pass 3 parameters to our function: The image path, the specified height, and the specified width. I will be naming the function <code>image_thumb</code>. You can use any name you wish.</p>

<pre><code>&lt;?php

function image_thumb( $image_path, $height, $width ) {
    // code
}

/* End of file image_helper.php */
/* Location: ./application/helpers/image_helper.php */
</code></pre>

<p>In order to use the Image Library of CodeIgniter, we need the CodeIgniter object available to us. In the current state of the function, if we used <code>$this-&gt;load-&gt;library('image_lib')</code> to load the Image Library, the function would throw error. This is because helpers in CodeIgniter are not classes but rather a collection of functions. So, how do we use CodeIgniter's libraries in our helper? CodeIgniter's got us covered! CodeIgniter has a function called <code>get_instance()</code> which returns the CodeIgniter super object. We will use it like so:</p>

<pre><code>function image_thumb( $image_path, $height, $width ) {
    // Get the CodeIgniter super object
    $CI =&amp; get_instance();
}
</code></pre>

<p>It is important to be aware that we are passing the <code>get_instance()</code> function by reference. Passing by reference allows us to use the original CodeIgniter object (already in memory) rather than creating a copy of it (duplicating memory). Passing variables and functions by reference comes in handy when optimizing your PHP application. But, that is another article for another day.</p>

<p>The next thing we must do is figure out where to store the generated thumbnails. This is for caching purposes. When the function is used, the original image path is passed to it. To get the directory path from the image path we will use PHP's built-in <code>dirname()</code> function.</p>

<p>For example: I would pass <code>assets/images/picture-1/picture-1.jpg</code> as the original image file path and <code>dirname('assets/images/picture-1/picture-1.jpg')</code> would return <code>assets/images/picture-1/</code> as the directory to save the generated thumbnails. Notice I will not pass the path with a beginning slash (/).</p>

<p>We also need to construct the filename we want for our thumbnail image. I will make the filename <code>height_width.jpg</code> because all of my images are grouped inside their own folders. Take a look at the updated function:</p>

<pre><code>function image_thumb( $image_path, $height, $width ) {
    // Get the CodeIgniter super object
    $CI =&amp; get_instance();

    // Path to image thumbnail
    $image_thumb = dirname( $image_path ) . '/' . $height . '_' . $width . '.jpg';
}
</code></pre>

<p>Now, the way caching works in this function is if the image thumbnail path (<code>$image_thumb</code>) exists, the thumbnail has already been created therefore does not need to be generated again. If the file does not exists, we need to create it!</p>

<p>To create the image thumbnail, we need to load CodeIgniter's Image Library.</p>

<pre><code>function image_thumb( $image_path, $height, $width ) {
    // Get the CodeIgniter super object
    $CI =&amp; get_instance();

    // Path to image thumbnail
    $image_thumb = dirname( $image_path ) . '/' . $height . '_' . $width . '.jpg';

    if ( !file_exists( $image_thumb ) ) {
        // LOAD LIBRARY
        $CI-&gt;load-&gt;library( 'image_lib' );
    }
}
</code></pre>

<p>Before we can do anything with the Image Library, we need to configure it.</p>

<pre><code>function image_thumb( $image_path, $height, $width ) {
    // Get the CodeIgniter super object
    $CI =&amp; get_instance();

    // Path to image thumbnail
    $image_thumb = dirname( $image_path ) . '/' . $height . '_' . $width . '.jpg';

    if ( !file_exists( $image_thumb ) )
    {
        // LOAD LIBRARY
        $CI-&gt;load-&gt;library( 'image_lib' );

        // CONFIGURE IMAGE LIBRARY
        $config['image_library']    = 'gd2';
        $config['source_image']     = $image_path;
        $config['new_image']        = $image_thumb;
        $config['maintain_ratio']   = TRUE;
        $config['height']           = $height;
        $config['width']            = $width;
        $CI-&gt;image_lib-&gt;initialize( $config );
    }
}
</code></pre>

<p>I am using GD2 as the image library. You can use what you wish, gd2 is default. The source_image config variable is the path to the original (full-size) image. The new_image config variable is the path to our specified thumbnail image. CodeIgniter will save the thumbnail to this path. I have set maintain_ratio to TRUE so that CodeIgniter automatically resizes our image to the best dimensions to fit our specified height and width, without distorting the image in any way.</p>

<p>Finally, we initialize our configuration:</p>

<pre><code>$CI-&gt;image_lib-&gt;initialize( $config );
</code></pre>

<p>After configuration is complete, we need to process the image to generate our thumbnail. Do this by running <code>$CI-&gt;image_lib-&gt;resize()</code>. After resizing the image, we need to reset all values used by the Image Library when processing an image. Do this by running <code>$CI-&gt;image_lib-&gt;clear()</code>.</p>

<p>Last but not least, we need to return our thumbnail! In my function, I have returned the HTML image tag (<code>img</code>) with the thumbnail path already in the source (<code>src</code>) attribute. You can just return the path if you want, just return the generated src path.</p>

<h2>The Complete Function</h2>

<pre><code>&lt;?php

function image_thumb( $image_path, $height, $width ) {
    // Get the CodeIgniter super object
    $CI =&amp; get_instance();

    // Path to image thumbnail
    $image_thumb = dirname( $image_path ) . '/' . $height . '_' . $width . '.jpg';

    if ( !file_exists( $image_thumb ) ) {
        // LOAD LIBRARY
        $CI-&gt;load-&gt;library( 'image_lib' );

        // CONFIGURE IMAGE LIBRARY
        $config['image_library']    = 'gd2';
        $config['source_image']     = $image_path;
        $config['new_image']        = $image_thumb;
        $config['maintain_ratio']   = TRUE;
        $config['height']           = $height;
        $config['width']            = $width;
        $CI-&gt;image_lib-&gt;initialize( $config );
        $CI-&gt;image_lib-&gt;resize();
        $CI-&gt;image_lib-&gt;clear();
    }

    return '&lt;img src="' . dirname( $_SERVER['SCRIPT_NAME'] ) . '/' . $image_thumb . '" /&gt;';
}

/* End of file image_helper.php */
/* Location: ./application/helpers/image_helper.php */
</code></pre>

<h2>Using the Function</h2>

<p>In order to use the function, you will need to load the helper, either in your controller or the application autoload file.</p>

<p>General usage in View:</p>

<pre><code>&lt;?php echo image_thumb( 'assets/images/picture-1/picture-1.jpg', 50, 50 ); ?&gt;
</code></pre>
]]></content:encoded>
      <guid>https://jrtashjian.com/2009/02/image-thumbnail-creation-caching-with-codeigniter</guid>
      <pubDate>Tue, 24 Feb 2009 19:00:00 -0500</pubDate>
      <author>JR Tashjian</author>
    </item>
    <item>
      <title><![CDATA[Simple Login Form With CodeIgniter]]></title>
      <link>https://jrtashjian.com/2009/02/simple-login-form-with-codeigniter</link>
      <description><![CDATA[One of the most basic but, most important part of a web application is the login form. The login form is the first stage of securing your web application. I will show you how I construct one using the Encryption Class, the Form Validation Class and the...]]></description>
      <content:encoded><![CDATA[<p>One of the most basic but, most important part of a web application is the login form. The login form is the first stage of securing your web application. I will show you how I construct one using the <a href="http://codeigniter.com/user_guide/libraries/encryption.html">Encryption Class</a>, the <a href="http://codeigniter.com/user_guide/libraries/form_validation.html">Form Validation Class</a> and the <a href="http://codeigniter.com/user_guide/libraries/sessions.html">Session Class</a> of <a href="http://codeigniter.com">CodeIgniter</a>.</p>

<p>To begin, we will need to create our view and controller files as well as load the libraries we will be using. I will not be using a database for this tutorial but, rather an array containing the username and password of out user.</p>

<p>For the views, I created a view for the header, the footer, and the login form:</p>

<p><strong>header.php</strong></p>

<pre><code>&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Welcome to CodeIgniter&lt;/title&gt;

&lt;style type="text/css"&gt;
body { background-color:#fff; margin:40px; font-family:Lucida Grande,Verdana,Sans-serif; font-size:14px; color:#4F5155; }
h1 { color:#444; background-color:transparent; border-bottom:1px solid #D0D0D0; font-size:16px; font-weight:bold; margin:24px 0 2px 0; padding:5px 0 6px 0; }
&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
</code></pre>

<p><strong>footer.php</strong></p>

<pre><code>&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p><strong>login_form.php</strong></p>

<pre><code>&lt;h1&gt;Tutorial: Simple Login Form&lt;/h1&gt;
</code></pre>

<p>Thats it for the views, so far. Next we will create the controller:</p>

<p><strong>main.php</strong></p>

<pre><code>class Main extends Controller {

    function Main() {
        parent::Controller();
    }

    function index() {
        // LOAD LIBRARIES
        $this-&gt;load-&gt;library( array( 'encrypt', 'form_validation', 'session' ) );

        // LOAD HELPERS
        $this-&gt;load-&gt;helper( array( 'form' ) );

        // VALID USER CREDENTIALS
        $user_credentials = array();
        $user_credentials['testuser1'] = array(
            'user_name' =&gt; 'testuser1',
            'user_pass' =&gt; 'Gag/R6LlMz8JKhjd+pkMrL+MUIHn86vjs/ZJ31uH+QRCh1eRxxA0Fve6FXfE7rmFqgqsiwe2ZFrFT8ylZs050A==' // password
        );
        $user_credentials['testuser2'] = array(
            'user_name' =&gt; 'testuser2',
            'user_pass' =&gt; 'Gag/R6LlMz8JKhjd+pkMrL+MUIHn86vjs/ZJ31uH+QRCh1eRxxA0Fve6FXfE7rmFqgqsiwe2ZFrFT8ylZs050A==' // password
        );
        $user_credentials['testuser3'] = array(
            'user_name' =&gt; 'testuser3',
            'user_pass' =&gt; 'Gag/R6LlMz8JKhjd+pkMrL+MUIHn86vjs/ZJ31uH+QRCh1eRxxA0Fve6FXfE7rmFqgqsiwe2ZFrFT8ylZs050A==' // password
        );

        $this-&gt;load-&gt;view( 'header' );
        $this-&gt;load-&gt;view( 'login_form' );
        $this-&gt;load-&gt;view( 'footer' );
    }

}

/* End of file main.php */
/* Location: ./application/controllers/main.php */
</code></pre>

<p>As you can see in the above code, I have already encrypted a password. To create an encrypted password from a string all you need to do is call <code>encode()</code> from the encryption class, like so:</p>

<pre><code>echo $this-&gt;encrypt-&gt;encode( 'password' );
</code></pre>

<h2>Building the Form</h2>

<p>After setting up the files as described above, we now need to create the form so our users can login. I will be using the <a href="http://codeigniter.com/user_guide/helpers/form_helper.html">Form Helper</a> that CodeIgniter provides us with instead of writing out the html. I will be creating this form inside the <code>login_form.php</code> view:</p>

<p><strong>login_form.php</strong></p>

<pre><code>&lt;h1&gt;Tutorial: Simple Login Form&lt;/h1&gt;

&lt;?php if ( $this-&gt;session-&gt;flashdata( 'message' ) ) : ?&gt;
    &lt;p&gt;&lt;?php echo $this-&gt;session-&gt;flashdata( 'message' ); ?&gt;&lt;/p&gt;
&lt;?php endif; ?&gt;

&lt;?php echo form_open( 'main/index/' ); ?&gt;
    &lt;?php echo form_fieldset( 'Login Form' ); ?&gt;

        &lt;div class="textfield"&gt;
            &lt;?php echo form_label( 'username', 'user_name' ); ?&gt;
            &lt;?php echo form_input( 'user_name' ); ?&gt;
        &lt;/div&gt;

        &lt;div class="textfield"&gt;
            &lt;?php echo form_label( 'password', 'user_pass' ); ?&gt;
            &lt;?php echo form_password( 'user_pass' ); ?&gt;
        &lt;/div&gt;

        &lt;div class="buttons"&gt;
            &lt;?php echo form_submit( 'login', 'Login' ); ?&gt;
        &lt;/div&gt;

    &lt;?php echo form_fieldset_close(); ?&gt;
&lt;?php echo form_close(); ?&gt;
</code></pre>

<p>You probably noticed I am using PHP <a href="http://codeigniter.com/user_guide/general/alternative_php.html">short tag syntax</a> which, I prefer to use. If you choose not to use short tag syntax instead of writing this:</p>

<pre><code>&lt;?php echo form_input( 'user_name' ); ?&gt;
</code></pre>

<p>you would write this:</p>

<pre><code>&lt;?php echo form_input( 'user_name' ); ?&gt;
</code></pre>

<p>Whatever suits your coding style, stick to it and be consistent throughout your code. I have also added a check to see if the <a href="http://codeigniter.com/user_guide/libraries/sessions.html">Flashdata</a> 'message' has been set. I like to use flashdata for temporary messages because any flashdata vars set will only be available for the next server request, and are then deleted or cleared. I will be using this to notify the user of an incorrect password, on successful login, and if a user has not been found.</p>

<h2>Submitting the Form</h2>

<p>Now that we have our form created, we need to make it work! So, open up that controller and lets put some code in there.</p>

<p>The first thing we must do upon submitting a form is to validate the data. CodeIgniter's Form Validation Class makes this really easy, all we have to do is set some rules:</p>

<pre><code>// SET VALIDATION RULES
$this-&gt;form_validation-&gt;set_rules( 'user_name', 'username', 'required' );
$this-&gt;form_validation-&gt;set_rules( 'user_pass', 'password', 'required' );
$this-&gt;form_validation-&gt;set_error_delimiters( '&lt;em&gt;','&lt;/em&gt;' );
</code></pre>

<p>The first parameter of <code>$this-&gt;form_validation-&gt;set_rules()</code> is the field name we set in html. The second parameter is what you would call the field in the error message (eg. The <code>username</code> field is a required field). The third parameter is the rule reference and defines what the field data should contain. We will not be doing anything special so, 'required' works for what we need to accomplish because all we need to check is if the field was filled in. I have also set the error message delimiters which again, is just personal preference. You can keep them as default or use different delimiters.</p>

<p>In order for us to validate the form we need to check to see if it has been submitted and then validate the form. If the form validates, we continue processing the submitted credentials if not, we display the error messages and the user can try to submit the form again.</p>

<pre><code>// SET VALIDATION RULES
$this-&gt;form_validation-&gt;set_rules( 'user_name', 'username', 'required' );
$this-&gt;form_validation-&gt;set_rules( 'user_pass', 'password', 'required' );
$this-&gt;form_validation-&gt;set_error_delimiters( '&lt;em&gt;','&lt;/em&gt;' );

// has the form been submitted and with valid form info (not empty values)
if ( $this-&gt;input-&gt;post( 'login' ) ) {
    if ( $this-&gt;form_validation-&gt;run() ) {
        // form submitted and validated continue processing
    }
}
</code></pre>

<p>If the form does not validate, <code>$this-&gt;form_validation-&gt;run()</code> will return FALSE and terminate the if-statement. The controller will then finish executing but, we still need to notify the user of any errors! When a form fails to validate, CodeIgniters Form Validation Class generates the error messages or messages and we can display them the way we choose on the view. CodeIgniter allows us to output these messages either in a block format (all messages in one place) or individually. I prefer to display them individually and right where the form element that had the error. To do that, we need to update out <code>login_form.php</code> view. We will be inserting the <code>form_error()</code> function which only needs one parameter; the name of our form element. We also will need to re-populate the form with the submitted data so the user can see what went wrong and also so the user does not have to re-type all the info back into the form. To do this, we will place the <code>set_value()</code> funtion inside the <code>form_input()</code> function</p>

<pre><code>&lt;div class="textfield"&gt;
    &lt;?php echo form_label( 'username', 'user_name' ); ?&gt;
    &lt;?php echo form_error( 'user_name' ); ?&gt;
    &lt;?php echo form_input( 'user_name', set_value( 'user_name' ) ); ?&gt;
&lt;/div&gt;

&lt;div class="textfield"&gt;
    &lt;?php echo form_label( 'password', 'user_pass' ); ?&gt;
    &lt;?php echo form_error( 'user_pass' ); ?&gt;
    &lt;?php echo form_password( 'user_pass' ); ?&gt;
&lt;/div&gt;
</code></pre>

<p>Now when a user submits a form with no information or with missing information, they will be denied access and informed about the error. They can then fix the errors and re-submit until they get it right.</p>

<h2>Validating The User</h2>

<p>Once the user has submitted a valid form we then need to check if the user is a valid user or not. If the user is a valid user, we will then continue processing if not, an error message will be displayed and the user will be returned to the login form. We will be displaying this error message using Flashdata.</p>

<pre><code>// has the form been submitted and with valid form info (not empty values)
if ( $this-&gt;input-&gt;post( 'login' ) ) {
    if ( $this-&gt;form_validation-&gt;run() ) {
        $user_name = $this-&gt;input-&gt;post( 'user_name' );
        $user_pass = $this-&gt;input-&gt;post( 'user_pass' );

        if ( array_key_exists( $user_name, $user_credentials ) ) {
            // continue processing form (validate password)
        } else {
            $this-&gt;session-&gt;set_flashdata( 'message', 'A user does not exist for the username specified.' );
            redirect( 'main/index/' );
        }
    }
}
</code></pre>

<p>Once the user has submitted credentials for a valid user, we will then check the submitted password against the stored password to see if they match we will allow the user to login and use the application. If the passwords do not match, we will display another message notifying the user of the error and then return the user back to the login form.</p>

<pre><code>// has the form been submitted and with valid form info (not empty values)
if ( $this-&gt;input-&gt;post( 'login' ) ) {
    if ( $this-&gt;form_validation-&gt;run() ) {
        $user_name = $this-&gt;input-&gt;post( 'user_name' );****
        $user_pass = $this-&gt;input-&gt;post( 'user_pass' );

        if ( array_key_exists( $user_name, $user_credentials ) ) {
            if ( $user_pass == $this-&gt;encrypt-&gt;decode( $user_credentials[ $user_name ]['user_pass'] ) ) {
                // user has been logged in
                die( "USER LOGGED IN!" );
            } else {
                $this-&gt;session-&gt;set_flashdata( 'message', 'Incorrect password.' );
                redirect( 'main/index/' );
            }
        } else {
            $this-&gt;session-&gt;set_flashdata( 'message', 'A user does not exist for the username specified.' );
            redirect( 'main/index/' );
        }
    }
}
</code></pre>

<p>Well, there you have it. A simple and easy login form created using CodeIgniter. Even though I used an array to store user credentials, it would be really easy to modify the code for use with a database.</p>

<p>You can <a href="https://jrtashjian.com/wp-content/uploads/2009/02/simple-login-form-with-codeigniter.zip">download the demo</a> here.</p>

<p>Remember, you still need to update the variable <code>$config['base_url']</code> inside the <code>./application/config/config.php</code> file.</p>
]]></content:encoded>
      <guid>https://jrtashjian.com/2009/02/simple-login-form-with-codeigniter</guid>
      <pubDate>Mon, 09 Feb 2009 19:00:00 -0500</pubDate>
      <author>JR Tashjian</author>
    </item>
    <item>
      <title><![CDATA[Limit Words in a String]]></title>
      <link>https://jrtashjian.com/2008/11/limit-words-in-a-string</link>
      <description><![CDATA[While developing websites, I've frequently run into clients who would like a news system integrated on their site. A news system consists of a list of articles, usually a summary at first, and when an article has been selected, the full article is...]]></description>
      <content:encoded><![CDATA[<p>While developing websites, I've frequently run into clients who would like a news system integrated on their site. A news system consists of a list of articles, usually a summary at first, and when an article has been selected, the full article is displayed. So, how do you extract the summary from the content without duplicating content?</p>

<p>If you wanted to do this effect quickly, you could just use the function <a href="http://php.net/substr"><code>substr()</code></a>. However, the <a href="http://php.net/substr"><code>substr()</code></a> function only limits the number of characters being displayed. The returned result would be an excerpt of text that may or may not have the ending word cut-off.</p>

<p>The purpose behind this function is to limit the number of words displayed in such a way that the ending word is not cut-off. Personally, I think this small change makes the site look a little nicer.</p>

<pre><code>function limit_words( $string, $word_limit ) {
    $words = explode( " ", $string );
    return implode( " ", array_splice( $words, 0, $word_limit ) );
}
</code></pre>

<p>To use this function, pass the text you would like to extract the excerpt from, as <code>$string</code>. Then, set the number of words you would like to display as <code>$word_limit</code>. The function will return the excerpt as a string.</p>

<p>The function separates the string where it finds a space, therefore separating each word using the <a href="http://php.net/explode"><code>explode()</code></a> function. Each word is put into an array called <code>$words</code>. We then cut out the excerpt using the number of words we would like to display (<code>$word_limit</code>) starting from the beginning using the <a href="http://php.net/array_splice"><code>array_splice()</code></a> function. With the excerpt extracted from the full text, we then recreate the string by adding spaces after each key (word) in the array using the <a href="http://php.net/implode"><code>implode()</code></a> function.</p>

<pre><code># Example Usage
$content = "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.";
echo limit_words( $content, 20 );
</code></pre>

<p>The above example would output this result:</p>

<pre><code>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut
</code></pre>

<p>Simple function, Nice results. Enjoy!</p>
]]></content:encoded>
      <guid>https://jrtashjian.com/2008/11/limit-words-in-a-string</guid>
      <pubDate>Sun, 09 Nov 2008 19:00:00 -0500</pubDate>
      <author>JR Tashjian</author>
    </item>
  </channel>
</rss>
